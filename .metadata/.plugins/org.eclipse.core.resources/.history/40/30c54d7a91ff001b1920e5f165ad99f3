#include<stdio.h>
#include<string.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

struct employee
{
	int id; // уникальное поле
	char name[20];
	float Income;
	float Premium;
	float RegularBonus;
	float ActualBonus;
	float Rise;
	float RegularHours;
	float ActualHours;
	float OverTime;
	float Wage;
	float BonusPay;
	float RisePay;
	float OverTimePay;
	float Tax;
	int TeudatZehut;
};
struct employee  Tom, Mary, John;

int helpIdDataTypeLength = 7;
char helpIdDataType[7][20] =
	{ "Wage",
	  "BonusPay",
	  "Income",
	  "Tax",
	  "TeudatZehut",
	  "RegularBonus",
	  "ActualHours",
	};



float quarter = 3;
float month = 20;
float day = 8;



int main()
{
//	float wageTom = countWage(39000, 0, 520, 480, 30, 0); // test
//	printf("Wage Tom = %.2f", wageTom);
	/**** Common data ****/

	//initialize employee
	TomInitialize();
	MaryInitialize();
	JohnInitialize();
	/****** Tom *****/
	printInfo(&Tom);


	/****** Mary *****/
	printInfo(&Mary);

	/****** John *****/
	printInfo(&John);

	int res;
	res = scanFunction(3,5);
	printFunction(res / 10, res % 10);
	return 0;
}
void TomInitialize()
{
	Tom.id = 1;
	strcpy(Tom.name, "Tom");
	Tom.Income = 39000;
	Tom.Premium = 0;
	Tom.RegularBonus = 30;
	Tom.ActualBonus = Tom.RegularBonus / 1.5;
	Tom.Rise = 520;
	Tom.RegularHours = countRegularHours(quarter,month,day);
	Tom.ActualHours = Tom.RegularHours/3*2.5;
	Tom.OverTime = countOverTime(Tom.RegularHours, Tom.ActualHours);
	Tom.Wage = countWage(Tom.Income,Tom.Premium,Tom.Rise,
							Tom.RegularHours,Tom.RegularBonus,Tom.OverTime);
	Tom.BonusPay = countBonusPay(Tom.ActualHours,Tom.ActualBonus, Tom.Wage);
	Tom.RisePay = countRisePay(Tom.Rise,quarter);
	Tom.OverTimePay = countOverTimePay(Tom.OverTime, Tom.Wage);
	Tom.Tax = countTax(Tom.Wage*Tom.ActualHours, Tom.BonusPay + Tom.RisePay + Tom.OverTimePay + Tom.Premium);
	Tom.TeudatZehut = generateTeudatZehut(Tom.id);

}
void MaryInitialize()
{
	Mary.id = 2;
	strcpy(Mary.name, "Mary");
	Mary.Income = 31000;
	Mary.RegularBonus = 25;
	Mary.ActualBonus = Mary.RegularBonus;
	Mary.Rise = 0;
	Mary.RisePay = countRisePay(Mary.Rise,quarter);
	Mary.RegularHours = countRegularHours(quarter,month,day);
	Mary.ActualHours = 500;
	Mary.Wage = (TomFunction(1)+15 + 5) / 2;
	Mary.BonusPay = countBonusPay(Mary.RegularHours,Mary.ActualBonus, Mary.Wage);
	Mary.OverTime = countOverTime(Mary.RegularHours, Mary.ActualHours);
	Mary.OverTimePay = countOverTimePay(Mary.OverTime, Mary.Wage);
	Mary.Premium = Mary.Income - Mary.Wage*Mary.RegularHours - Mary.BonusPay - Mary.RisePay - Mary.OverTimePay;
	Mary.Tax = countTax(Mary.Wage*Mary.RegularHours,Mary.BonusPay + Mary.RisePay+Mary.OverTimePay + Mary.Premium);
	Mary.TeudatZehut = generateTeudatZehut(Mary.id);
}
void JohnInitialize()
{
	John.id = 3;
	strcpy(John.name, "John");
	John.RegularHours = countRegularHours(quarter,month,day);
	John.ActualHours = MaryFunction(7)-5*day;
	John.Wage = MaryFunction(1) - 5;
	John.RegularBonus = TomFunction(6) / 1.5;
	John.ActualBonus = John.RegularBonus;
	John.BonusPay = countBonusPay(John.ActualHours,John.ActualBonus,John.Wage);
	John.Premium = 0;
	John.Rise = 0;
	John.RisePay = countRisePay(John.Rise,quarter);
	John.OverTime = countOverTime(John.RegularHours, John.ActualHours);
	John.OverTimePay = countOverTimePay(John.OverTime, John.Wage);
	John.Tax = countTax(John.Wage*John.ActualHours, John.BonusPay + John.RisePay + John.OverTimePay + John.Premium);
	John.Income = John.Wage*John.ActualHours + John.BonusPay + John.RisePay + John.OverTimePay + John.Premium;
	John.TeudatZehut = generateTeudatZehut(John.id);
}

float TomFunction(int idDataType)
{
	switch (idDataType)
	{
		case 1: return Tom.Wage;
		case 2: return Tom.BonusPay;
		case 3: return Tom.Income;
		case 4: return Tom.Tax;
		case 5: return Tom.TeudatZehut;
		case 6: return Tom.RegularBonus;
		case 7: return Tom.ActualHours;
	}

	return 0;
}

float MaryFunction(int idDataType)
{
	switch (idDataType)
		{
			case 1: return Mary.Wage;
			case 2: return Mary.BonusPay;
			case 3: return Mary.Income;
			case 4: return Mary.Tax;
			case 5: return Mary.TeudatZehut;
			case 6: return Mary.RegularBonus;
			case 7: return Mary.ActualHours;
		}
	return 0;
}

float JohnFunction(int idDataType)
{
	switch (idDataType)
		{
			case 1: return John.Wage;
			case 2: return John.BonusPay;
			case 3: return John.Income;
			case 4: return John.Tax;
			case 5: return John.TeudatZehut;
			case 6: return John.RegularBonus;
			case 7: return John.ActualHours;
		}


	return 0;
}

float employeeFunction(struct employee* emp, int idDataType)
{
	switch (idDataType)
	{
		case 1: return emp->Wage;
		case 2: return emp->BonusPay;
		case 3: return emp->Income;
		case 5: return emp->TeudatZehut; // type int not float;
		case 6: return emp->RegularBonus;
		case 7: return emp->ActualHours;
	}
	return 0;
}
	/********* Service functions *********/


void printInfo(struct employee* emp)
// пока функция выводит всю информацию о работнике
// можно при помощи switch/case и idDataType выводить только необходимую информацию
{
	printf("//*****%s*****//\n", emp->name);
	printf("Income = %.2f\n", emp->Income);
	printf("Wage = %.2f\n", emp->Wage);
	printf("Bonus pay = %.2f\n", emp->BonusPay);
	printf("Overtime pay = %.2f\n", emp->OverTimePay);
	printf("Premium = %.2f\n", emp->Premium);
	printf("Rise pay = %.2f\n", emp->RisePay);
	printf("Tax = %.2f\n", emp->Tax);
	printf("TeudatZehut = %d\n", emp->TeudatZehut);
}

void printFunction(int id, int idDataType)
{
	// не знаю есть ли в С следующая функциональность как для C#
	// using System.Collections.Generic;
	// using System.Linq;
	// ...
	// List<employee> employees = new List<employee>();
	// name = employees.Where( x.id => id ).name;
	// ...
	switch (id)
	{
		case 1: switch (idDataType)
				{
					case 1: printf("Tom Wage = %.2f", TomFunction(1));
							break;
					case 2: printf("Tom BonusPay = %.2f", TomFunction(2));
							break;
					case 3: printf("Tom Income = %.2f", TomFunction(3));
							break;
					case 5: printf("Tom TeudatZehut = %.0f", TomFunction(5));
							break;
				}
				break;
		case 2: switch (idDataType)
				{
					case 1: printf("Mary Wage = %.2f", MaryFunction(1));
							break;
					case 2: printf("Mary BonusPay = %.2f", MaryFunction(2));
							break;
					case 3: printf("Mary Income = %.2f", MaryFunction(3));
							break;
					case 5: printf("Mary TeudatZehut = %.0f", MaryFunction(5));
							break;
				}
				break;
		case 3: switch (idDataType)
				{
					case 1: printf("John Wage = %.2f", JohnFunction(1));
							break;
					case 2: printf("John BonusPay = %.2f", JohnFunction(2));
							break;
					case 3: printf("John Income = %.2f", JohnFunction(3));
							break;
					case 5: printf("John TeudatZehut = %.0f", JohnFunction(5));
							break;
				}
				break;
	}




}
float countRegularHours(float quarter, float month, float day)
{
	float res = quarter * month * day;
	return res;
}


float countBonusPay(float hours, float bonus, float wage)
{
	float res = hours * bonus * wage / 100;
	return res;
}

float countOverTimePay(float overTime, float wage)
{
	float res = overTime * wage * 2;
	return res;
}

float countOverTime(float regularHours, float actualHours)
{
	if (regularHours >= actualHours ) {return 0;}
	float res = actualHours - regularHours;

	return res;
}

float countRisePay(float rise, float quarter)
{
	float res = rise * quarter;
	return res;
}

float countWage(float income, float premium, float rise,
		float hours, float bonus, float overTime)
{
	float res = (income - premium - rise * 3) / (hours + hours * bonus/100 + overTime * 2);

	return res;
}

float countTax(float salaryRegular, float extraPayments)
{
	float res=0;
	res = salaryRegular*0.15 + extraPayments*0.2;
	return res;
}

int countKey(int num)
{
	int digit = 0, sum = 0, res = 0, count = 0;

	do
	{
		digit = num % 10;
		num = num / 10;
		if(count % 2 == 0)
		{
			digit = digit * 2;
			if (digit > 9) digit -= 9;
		}

		sum = sum + digit;
		count ++;
	}
	while(num != 0);

	res = 10 - sum % 10;
	res %= 10;

	return res;
}

int generateTeudatZehut(int firstDigit)
{
	srand(time(NULL));
	int numTZ = firstDigit;
	int i;
	for(i = 0; i<=6; i++)
	{
		numTZ = numTZ*10 + rand()%10;
	}
	int key = countKey(numTZ);
	numTZ = numTZ*10+key;

	return numTZ;
}

int scanFunction(int maxId, int maxIdDataType)
{
	int id;
	int idDataType;
	//int res;
	do
	{
		printf("Enter id from 1 to %d\n", maxId);
		printf("1 -> Tom\n");
		printf("2 -> Mary\n");
		printf("3 -> John\n");
		fflush(stdout);
		scanf("%d", &id);
	}while(id<0 || id>maxId);


	do
	{
		printf("Enter idDataType from 1 to %d\n", maxIdDataType);
		printHelpIDDataType();
		fflush(stdout);
		scanf("%d", &idDataType);
	}while(idDataType<0 || idDataType>maxIdDataType);
	//res[0] = id;
	//res[1] = idDataType;
	return id*10+idDataType;//еще над этим поработаем
}

void printHelpIDDataType()
{
	int i;
	printf("\n");
	for(i = 0; i<helpIdDataTypeLength; i++)
	{
					printf("%d -> %s\n",  i+1, helpIdDataType[i]);
	}

}
