/*

Homework
 	 1. Update function countOverTime() with the condition -
 the function should return 0 when overTime <= 0 without counting.
 	 2. Count and print wage and bonusPay for every employee,
 using service functions. Place related code into the corresponding
 block in main()
 	 3. Count premium for Mary
 	 4. *** Count tax for every employee (15% from wage and 20%
 from any extra payments)


1 quarter = 3 months = 480 hours
1 month = 20 days
1 day = 8 hours

39000   hours*wage0.3*480*wage 0             0       520*3
income = salary + bonusPay + premium + overTimePay + risePay

//wage = (income - risePay - overTimePay - premium - bonusPay) / hours

income = (wage * hours) + (wage * hours * bonus)/100 +
	(overTime * wage * 2) + (rise * 3) + premium

income = wage * (hours + hours * bonus/100 + overTime * 2) + (rise * 3) + premium

wage = (income - premium - rise * 3) / (hours + hours * bonus/100 + overTime * 2)

39000 = 480*wage + 144*wage + 0 + 0 + 1560

(39000 - 1560) = 624 * wage

wage = 37440 / 624 = 60 - Tom

bonus = ? %
bonusPay = salary * bonus / 100
salary = regularHours * wage
overTime
overTimePay = overTime * wage * 2
wage
premium
regularHours
actualHours
rise =
risePay = rise * quarter / months

*/


#include<stdio.h>
float countWage(float income, float premium, float rise,
		float hours, float bonus, float overTime);
float countRegularHours(float quarter, float month, float day);
float countBonusPay(float hours, float bonus, float wage);
float countOverTimePay(float overTime, float wage);
float countOverTime(float regularHours, float actualHours);
float countRisePay(float rise, float quarter);
float countTax(float salaryRegular, float extraPayments);

int main()
{
//	float wageTom = countWage(39000, 0, 520, 480, 30, 0); // test
//	printf("Wage Tom = %.2f", wageTom);
	/**** Common data ****/

	float quarter = 3;
	float month = 20;
	float day = 8;
	float result;

	/****** Tom *****/
	printf("Tom\n");
	float TomIncome = 39000;
	float TomPremium = 0;
	float TomRegularBonus = 30;
	float TomActualBonus = TomRegularBonus / 1.5;
	float TomRise = 520;
	float TomRegularHours = countRegularHours(quarter,month,day);
	float TomActualHours = TomRegularHours/3*2.5;
	float TomOverTime = countOverTime(TomRegularHours, TomActualHours);
	float TomWage = countWage(TomIncome,TomPremium,TomRise,
								TomRegularHours,TomRegularBonus,TomOverTime);
	printf("Wage = %.2f\n", TomWage);
	float TomBonusPay = countBonusPay(TomActualHours,TomActualBonus, TomWage);
	printf("Bonus pay = %.2f\n", TomBonusPay);
	float TomRisePay = countRisePay(TomRise,quarter);
	float TomOverTimePay = countOverTimePay(TomOverTime, TomWage);
	float TomTax = countTax(TomWage*TomActualHours, TomBonusPay + TomRisePay+TomOverTimePay);
	printf("Tax = %.2f\n", TomTax);

	/****** Mary *****/

	/****** John *****/

	return 0;
}

	/********* Service functions *********/

float countRegularHours(float quarter, float month, float day)
{
	float res = quarter * month * day;
	return res;
}


float countBonusPay(float hours, float bonus, float wage)
{
	float res = hours * bonus * wage / 100;
	return res;
}

float countOverTimePay(float overTime, float wage)
{
	float res = overTime * wage * 2;
	return res;
}

float countOverTime(float regularHours, float actualHours)
{
	float res = actualHours - regularHours;
	if (res < 0) {res = 0;}
	return res;
}

float countRisePay(float rise, float quarter)
{
	float res = rise * quarter;
	return res;
}

float countWage(float income, float premium, float rise,
		float hours, float bonus, float overTime)
{
	float res = (income - premium - rise * 3) / (hours + hours * bonus/100 + overTime * 2);

	return res;
}

float countTax(float salaryRegular, float extraPayments)
{
	float res=0;
	res = salaryRegular*0.15 + extraPayments*0.2;
	return res;
}

